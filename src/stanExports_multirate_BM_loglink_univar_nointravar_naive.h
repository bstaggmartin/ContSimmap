// Generated by rstantools.  Do not edit by hand.

/*
    contsimmap is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    contsimmap is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with contsimmap.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_multirate_BM_loglink_univar_nointravar_naive_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_multirate_BM_loglink_univar_nointravar_naive");
    reader.add_event(194, 192, "end", "model_multirate_BM_loglink_univar_nointravar_naive");
    return reader;
}
template <typename T0__, typename T1__, typename T9__, typename T12__, typename T13__, typename T14__>
typename boost::math::tools::promote_args<T0__, T1__, T9__, T12__, typename boost::math::tools::promote_args<T13__, T14__>::type>::type
prune(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gamma,
          const int& N,
          const int& K,
          const int& T,
          const int& E,
          const int& C,
          const std::vector<int>& n_obs,
          const std::vector<int>& ind_obs,
          const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& Y,
          const std::vector<int>& n_inc,
          const std::vector<int>& pos_inc,
          const Eigen::Matrix<T12__, Eigen::Dynamic, 1>& t,
          const Eigen::Matrix<T13__, Eigen::Dynamic, Eigen::Dynamic>& W,
          const Eigen::Matrix<T14__, Eigen::Dynamic, Eigen::Dynamic>& Z,
          const std::vector<int>& n_des,
          const std::vector<int>& ind_des,
          const std::vector<int>& pos_des,
          const std::vector<std::vector<int> >& ind_tip,
          const std::vector<int>& ind_root,
          const std::vector<int>& ind_prune,
          const std::vector<int>& n_dim,
          const std::vector<int>& ind_dim,
          const std::vector<int>& pos_dim,
          const std::vector<int>& code_obs,
          const std::vector<int>& code_tip,
          const std::vector<int>& code_nod, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T9__, T12__, typename boost::math::tools::promote_args<T13__, T14__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("r", "sum(n_inc)", sum(n_inc));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> r(sum(n_inc));
        stan::math::initialize(r, DUMMY_VAR__);
        stan::math::fill(r, DUMMY_VAR__);
        current_statement_begin__ = 12;
        validate_non_negative_index("X", "E", E);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> X(E);
        stan::math::initialize(X, DUMMY_VAR__);
        stan::math::fill(X, DUMMY_VAR__);
        current_statement_begin__ = 13;
        validate_non_negative_index("P", "E", E);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> P(E);
        stan::math::initialize(P, DUMMY_VAR__);
        stan::math::fill(P, DUMMY_VAR__);
        current_statement_begin__ = 14;
        validate_non_negative_index("R", "E", E);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> R(E);
        stan::math::initialize(R, DUMMY_VAR__);
        stan::math::fill(R, DUMMY_VAR__);
        current_statement_begin__ = 20;
        if (as_bool(get_base1(dims(gamma), 1, "dims(gamma)", 1))) {
            current_statement_begin__ = 21;
            stan::math::assign(r, elt_multiply(t, add(stan::math::exp(multiply(W, beta)), stan::math::exp(multiply(Z, gamma)))));
        } else {
            current_statement_begin__ = 23;
            stan::math::assign(r, elt_multiply(t, stan::math::exp(multiply(W, beta))));
        }
        current_statement_begin__ = 29;
        for (int i = 1; i <= N; ++i) {
            {
            current_statement_begin__ = 30;
            validate_non_negative_index("ind_nod", "T", T);
            std::vector<int  > ind_nod(T, int(0));
            stan::math::fill(ind_nod, std::numeric_limits<int>::min());
            current_statement_begin__ = 31;
            stan::math::assign(ind_nod, stan::model::rvalue(ind_tip, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "ind_tip"));
            current_statement_begin__ = 32;
            stan::model::assign(X, 
                        stan::model::cons_list(stan::model::index_multi(ind_nod), stan::model::nil_index_list()), 
                        rep_vector(get_base1(Y, 1, i, "Y", 1), T), 
                        "assigning variable X");
            current_statement_begin__ = 33;
            stan::model::assign(P, 
                        stan::model::cons_list(stan::model::index_multi(ind_nod), stan::model::nil_index_list()), 
                        rep_vector(-(1), T), 
                        "assigning variable P");
            current_statement_begin__ = 34;
            stan::model::assign(R, 
                        stan::model::cons_list(stan::model::index_multi(ind_nod), stan::model::nil_index_list()), 
                        rep_vector(0, T), 
                        "assigning variable R");
            }
        }
        current_statement_begin__ = 38;
        for (auto& i : ind_prune) {
            (void) i;  // dummy to suppress unused var warning
            {
            current_statement_begin__ = 40;
            int tmp_n(0);
            (void) tmp_n;  // dummy to suppress unused var warning
            stan::math::fill(tmp_n, std::numeric_limits<int>::min());
            current_statement_begin__ = 41;
            int tmp_n_pos(0);
            (void) tmp_n_pos;  // dummy to suppress unused var warning
            stan::math::fill(tmp_n_pos, std::numeric_limits<int>::min());
            current_statement_begin__ = 42;
            local_scalar_t__ cur_P(DUMMY_VAR__);
            (void) cur_P;  // dummy to suppress unused var warning
            stan::math::initialize(cur_P, DUMMY_VAR__);
            stan::math::fill(cur_P, DUMMY_VAR__);
            current_statement_begin__ = 43;
            local_scalar_t__ cur_X(DUMMY_VAR__);
            (void) cur_X;  // dummy to suppress unused var warning
            stan::math::initialize(cur_X, DUMMY_VAR__);
            stan::math::fill(cur_X, DUMMY_VAR__);
            current_statement_begin__ = 44;
            local_scalar_t__ cur_R(DUMMY_VAR__);
            (void) cur_R;  // dummy to suppress unused var warning
            stan::math::initialize(cur_R, DUMMY_VAR__);
            stan::math::fill(cur_R, DUMMY_VAR__);
            current_statement_begin__ = 45;
            local_scalar_t__ sum_PX(DUMMY_VAR__);
            (void) sum_PX;  // dummy to suppress unused var warning
            stan::math::initialize(sum_PX, DUMMY_VAR__);
            stan::math::fill(sum_PX, DUMMY_VAR__);
            current_statement_begin__ = 46;
            local_scalar_t__ sum_k(DUMMY_VAR__);
            (void) sum_k;  // dummy to suppress unused var warning
            stan::math::initialize(sum_k, DUMMY_VAR__);
            stan::math::fill(sum_k, DUMMY_VAR__);
            current_statement_begin__ = 47;
            stan::math::assign(tmp_n, get_base1(n_des, i, "n_des", 1));
            current_statement_begin__ = 48;
            stan::math::assign(tmp_n_pos, get_base1(pos_des, i, "pos_des", 1));
            current_statement_begin__ = 49;
            stan::math::assign(cur_P, 0);
            current_statement_begin__ = 50;
            stan::math::assign(cur_X, 0);
            current_statement_begin__ = 51;
            stan::math::assign(sum_PX, 0);
            current_statement_begin__ = 52;
            stan::math::assign(sum_k, 0);
            {
            current_statement_begin__ = 54;
            validate_non_negative_index("tmp_n_ind", "tmp_n", tmp_n);
            std::vector<int  > tmp_n_ind(tmp_n, int(0));
            stan::math::fill(tmp_n_ind, std::numeric_limits<int>::min());
            current_statement_begin__ = 55;
            stan::math::assign(tmp_n_ind, segment(ind_des, tmp_n_pos, tmp_n));
            current_statement_begin__ = 57;
            stan::math::assign(cur_R, (2 * sum(stan::model::rvalue(R, stan::model::cons_list(stan::model::index_multi(tmp_n_ind), stan::model::nil_index_list()), "R"))));
            current_statement_begin__ = 60;
            for (auto& j : tmp_n_ind) {
                (void) j;  // dummy to suppress unused var warning
                {
                current_statement_begin__ = 61;
                int tmp_code(0);
                (void) tmp_code;  // dummy to suppress unused var warning
                stan::math::fill(tmp_code, std::numeric_limits<int>::min());
                current_statement_begin__ = 62;
                int tmp_k(0);
                (void) tmp_k;  // dummy to suppress unused var warning
                stan::math::fill(tmp_k, std::numeric_limits<int>::min());
                current_statement_begin__ = 63;
                stan::math::assign(tmp_code, get_base1(code_nod, j, "code_nod", 1));
                current_statement_begin__ = 64;
                stan::math::assign(tmp_k, get_base1(n_dim, tmp_code, "n_dim", 1));
                current_statement_begin__ = 65;
                if (as_bool(tmp_k)) {
                    {
                    current_statement_begin__ = 72;
                    int tmp_m_pos(0);
                    (void) tmp_m_pos;  // dummy to suppress unused var warning
                    stan::math::fill(tmp_m_pos, std::numeric_limits<int>::min());
                    current_statement_begin__ = 73;
                    int tmp_m(0);
                    (void) tmp_m;  // dummy to suppress unused var warning
                    stan::math::fill(tmp_m, std::numeric_limits<int>::min());
                    current_statement_begin__ = 74;
                    local_scalar_t__ tmp_V(DUMMY_VAR__);
                    (void) tmp_V;  // dummy to suppress unused var warning
                    stan::math::initialize(tmp_V, DUMMY_VAR__);
                    stan::math::fill(tmp_V, DUMMY_VAR__);
                    current_statement_begin__ = 75;
                    local_scalar_t__ tmp_P(DUMMY_VAR__);
                    (void) tmp_P;  // dummy to suppress unused var warning
                    stan::math::initialize(tmp_P, DUMMY_VAR__);
                    stan::math::fill(tmp_P, DUMMY_VAR__);
                    current_statement_begin__ = 76;
                    local_scalar_t__ tmp_X(DUMMY_VAR__);
                    (void) tmp_X;  // dummy to suppress unused var warning
                    stan::math::initialize(tmp_X, DUMMY_VAR__);
                    stan::math::fill(tmp_X, DUMMY_VAR__);
                    current_statement_begin__ = 77;
                    local_scalar_t__ tmp_PX(DUMMY_VAR__);
                    (void) tmp_PX;  // dummy to suppress unused var warning
                    stan::math::initialize(tmp_PX, DUMMY_VAR__);
                    stan::math::fill(tmp_PX, DUMMY_VAR__);
                    current_statement_begin__ = 78;
                    stan::math::assign(tmp_m_pos, get_base1(pos_inc, j, "pos_inc", 1));
                    current_statement_begin__ = 79;
                    stan::math::assign(tmp_m, get_base1(n_inc, j, "n_inc", 1));
                    current_statement_begin__ = 80;
                    stan::math::assign(tmp_V, sum(segment(r, tmp_m_pos, tmp_m)));
                    current_statement_begin__ = 81;
                    if (as_bool(logical_eq(get_base1(P, j, "P", 1), -(1)))) {
                        current_statement_begin__ = 82;
                        stan::math::assign(tmp_P, (1 / tmp_V));
                    } else {
                        current_statement_begin__ = 84;
                        stan::math::assign(tmp_P, (1 / ((1 / get_base1(P, j, "P", 1)) + tmp_V)));
                    }
                    current_statement_begin__ = 86;
                    stan::math::assign(cur_P, (cur_P + tmp_P));
                    current_statement_begin__ = 87;
                    stan::math::assign(tmp_X, get_base1(X, j, "X", 1));
                    current_statement_begin__ = 88;
                    stan::math::assign(tmp_PX, (tmp_P * tmp_X));
                    current_statement_begin__ = 89;
                    stan::math::assign(sum_PX, (sum_PX + tmp_PX));
                    current_statement_begin__ = 90;
                    stan::math::assign(sum_k, (sum_k - tmp_k));
                    current_statement_begin__ = 91;
                    stan::math::assign(cur_R, (cur_R + (stan::math::log(tmp_P) - (tmp_X * tmp_PX))));
                    }
                }
                }
            }
            {
            current_statement_begin__ = 96;
            int tmp_code(0);
            (void) tmp_code;  // dummy to suppress unused var warning
            stan::math::fill(tmp_code, std::numeric_limits<int>::min());
            current_statement_begin__ = 97;
            int tmp_k(0);
            (void) tmp_k;  // dummy to suppress unused var warning
            stan::math::fill(tmp_k, std::numeric_limits<int>::min());
            current_statement_begin__ = 98;
            stan::math::assign(tmp_code, get_base1(code_nod, i, "code_nod", 1));
            current_statement_begin__ = 99;
            stan::math::assign(tmp_k, get_base1(n_dim, tmp_code, "n_dim", 1));
            current_statement_begin__ = 100;
            if (as_bool(tmp_k)) {
                current_statement_begin__ = 103;
                stan::math::assign(cur_X, (sum_PX / cur_P));
                current_statement_begin__ = 104;
                stan::math::assign(sum_k, (sum_k + tmp_k));
                current_statement_begin__ = 105;
                stan::math::assign(cur_R, (cur_R + ((pow(cur_X, 2) * cur_P) - stan::math::log(cur_P))));
            }
            }
            }
            current_statement_begin__ = 110;
            stan::model::assign(X, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        cur_X, 
                        "assigning variable X");
            current_statement_begin__ = 111;
            stan::model::assign(P, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        cur_P, 
                        "assigning variable P");
            current_statement_begin__ = 112;
            stan::model::assign(R, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        (0.5 * (cur_R + (sum_k * stan::math::log((2 * stan::math::pi()))))), 
                        "assigning variable R");
            }
        }
        current_statement_begin__ = 130;
        return stan::math::promote_scalar<fun_return_scalar_t__>((log_sum_exp(stan::model::rvalue(R, stan::model::cons_list(stan::model::index_multi(ind_root), stan::model::nil_index_list()), "R")) - stan::math::log(T)));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct prune_functor__ {
    template <typename T0__, typename T1__, typename T9__, typename T12__, typename T13__, typename T14__>
        typename boost::math::tools::promote_args<T0__, T1__, T9__, T12__, typename boost::math::tools::promote_args<T13__, T14__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& beta,
          const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& gamma,
          const int& N,
          const int& K,
          const int& T,
          const int& E,
          const int& C,
          const std::vector<int>& n_obs,
          const std::vector<int>& ind_obs,
          const Eigen::Matrix<T9__, Eigen::Dynamic, Eigen::Dynamic>& Y,
          const std::vector<int>& n_inc,
          const std::vector<int>& pos_inc,
          const Eigen::Matrix<T12__, Eigen::Dynamic, 1>& t,
          const Eigen::Matrix<T13__, Eigen::Dynamic, Eigen::Dynamic>& W,
          const Eigen::Matrix<T14__, Eigen::Dynamic, Eigen::Dynamic>& Z,
          const std::vector<int>& n_des,
          const std::vector<int>& ind_des,
          const std::vector<int>& pos_des,
          const std::vector<std::vector<int> >& ind_tip,
          const std::vector<int>& ind_root,
          const std::vector<int>& ind_prune,
          const std::vector<int>& n_dim,
          const std::vector<int>& ind_dim,
          const std::vector<int>& pos_dim,
          const std::vector<int>& code_obs,
          const std::vector<int>& code_tip,
          const std::vector<int>& code_nod, std::ostream* pstream__) const {
        return prune(beta, gamma, N, K, T, E, C, n_obs, ind_obs, Y, n_inc, pos_inc, t, W, Z, n_des, ind_des, pos_des, ind_tip, ind_root, ind_prune, n_dim, ind_dim, pos_dim, code_obs, code_tip, code_nod, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_multirate_BM_loglink_univar_nointravar_naive
  : public stan::model::model_base_crtp<model_multirate_BM_loglink_univar_nointravar_naive> {
private:
        int N;
        int K;
        int T;
        int E;
        int C;
        int B;
        int G;
        std::vector<int> n_obs;
        std::vector<int> ind_obs;
        matrix_d Y;
        std::vector<int> n_inc;
        std::vector<int> pos_inc;
        vector_d t;
        matrix_d W;
        matrix_d Z;
        std::vector<int> n_des;
        std::vector<int> ind_des;
        std::vector<int> pos_des;
        std::vector<std::vector<int> > ind_tip;
        std::vector<int> ind_root;
        std::vector<int> ind_prune;
        std::vector<int> n_dim;
        std::vector<int> ind_dim;
        std::vector<int> pos_dim;
        std::vector<int> code_obs;
        std::vector<int> code_tip;
        std::vector<int> code_nod;
public:
    model_multirate_BM_loglink_univar_nointravar_naive(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_multirate_BM_loglink_univar_nointravar_naive(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_multirate_BM_loglink_univar_nointravar_naive_namespace::model_multirate_BM_loglink_univar_nointravar_naive";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 138;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 139;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            current_statement_begin__ = 140;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 141;
            context__.validate_dims("data initialization", "E", "int", context__.to_vec());
            E = int(0);
            vals_i__ = context__.vals_i("E");
            pos__ = 0;
            E = vals_i__[pos__++];
            current_statement_begin__ = 142;
            context__.validate_dims("data initialization", "C", "int", context__.to_vec());
            C = int(0);
            vals_i__ = context__.vals_i("C");
            pos__ = 0;
            C = vals_i__[pos__++];
            current_statement_begin__ = 143;
            context__.validate_dims("data initialization", "B", "int", context__.to_vec());
            B = int(0);
            vals_i__ = context__.vals_i("B");
            pos__ = 0;
            B = vals_i__[pos__++];
            current_statement_begin__ = 144;
            context__.validate_dims("data initialization", "G", "int", context__.to_vec());
            G = int(0);
            vals_i__ = context__.vals_i("G");
            pos__ = 0;
            G = vals_i__[pos__++];
            current_statement_begin__ = 147;
            validate_non_negative_index("n_obs", "N", N);
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec(N));
            n_obs = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            size_t n_obs_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < n_obs_k_0_max__; ++k_0__) {
                n_obs[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 148;
            validate_non_negative_index("ind_obs", "sum(n_obs)", sum(n_obs));
            context__.validate_dims("data initialization", "ind_obs", "int", context__.to_vec(sum(n_obs)));
            ind_obs = std::vector<int>(sum(n_obs), int(0));
            vals_i__ = context__.vals_i("ind_obs");
            pos__ = 0;
            size_t ind_obs_k_0_max__ = sum(n_obs);
            for (size_t k_0__ = 0; k_0__ < ind_obs_k_0_max__; ++k_0__) {
                ind_obs[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 149;
            validate_non_negative_index("Y", "K", K);
            validate_non_negative_index("Y", "sum(n_obs)", sum(n_obs));
            context__.validate_dims("data initialization", "Y", "matrix_d", context__.to_vec(K,sum(n_obs)));
            Y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, sum(n_obs));
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_2_max__ = sum(n_obs);
            size_t Y_j_1_max__ = K;
            for (size_t j_2__ = 0; j_2__ < Y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                    Y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 152;
            validate_non_negative_index("n_inc", "E", E);
            context__.validate_dims("data initialization", "n_inc", "int", context__.to_vec(E));
            n_inc = std::vector<int>(E, int(0));
            vals_i__ = context__.vals_i("n_inc");
            pos__ = 0;
            size_t n_inc_k_0_max__ = E;
            for (size_t k_0__ = 0; k_0__ < n_inc_k_0_max__; ++k_0__) {
                n_inc[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 153;
            validate_non_negative_index("pos_inc", "E", E);
            context__.validate_dims("data initialization", "pos_inc", "int", context__.to_vec(E));
            pos_inc = std::vector<int>(E, int(0));
            vals_i__ = context__.vals_i("pos_inc");
            pos__ = 0;
            size_t pos_inc_k_0_max__ = E;
            for (size_t k_0__ = 0; k_0__ < pos_inc_k_0_max__; ++k_0__) {
                pos_inc[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 154;
            validate_non_negative_index("t", "sum(n_inc)", sum(n_inc));
            context__.validate_dims("data initialization", "t", "vector_d", context__.to_vec(sum(n_inc)));
            t = Eigen::Matrix<double, Eigen::Dynamic, 1>(sum(n_inc));
            vals_r__ = context__.vals_r("t");
            pos__ = 0;
            size_t t_j_1_max__ = sum(n_inc);
            for (size_t j_1__ = 0; j_1__ < t_j_1_max__; ++j_1__) {
                t(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 155;
            validate_non_negative_index("W", "sum(n_inc)", sum(n_inc));
            validate_non_negative_index("W", "B", B);
            context__.validate_dims("data initialization", "W", "matrix_d", context__.to_vec(sum(n_inc),B));
            W = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(sum(n_inc), B);
            vals_r__ = context__.vals_r("W");
            pos__ = 0;
            size_t W_j_2_max__ = B;
            size_t W_j_1_max__ = sum(n_inc);
            for (size_t j_2__ = 0; j_2__ < W_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < W_j_1_max__; ++j_1__) {
                    W(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 156;
            validate_non_negative_index("Z", "sum(n_inc)", sum(n_inc));
            validate_non_negative_index("Z", "G", G);
            context__.validate_dims("data initialization", "Z", "matrix_d", context__.to_vec(sum(n_inc),G));
            Z = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(sum(n_inc), G);
            vals_r__ = context__.vals_r("Z");
            pos__ = 0;
            size_t Z_j_2_max__ = G;
            size_t Z_j_1_max__ = sum(n_inc);
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    Z(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 157;
            validate_non_negative_index("n_des", "E", E);
            context__.validate_dims("data initialization", "n_des", "int", context__.to_vec(E));
            n_des = std::vector<int>(E, int(0));
            vals_i__ = context__.vals_i("n_des");
            pos__ = 0;
            size_t n_des_k_0_max__ = E;
            for (size_t k_0__ = 0; k_0__ < n_des_k_0_max__; ++k_0__) {
                n_des[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 158;
            validate_non_negative_index("ind_des", "sum(n_des)", sum(n_des));
            context__.validate_dims("data initialization", "ind_des", "int", context__.to_vec(sum(n_des)));
            ind_des = std::vector<int>(sum(n_des), int(0));
            vals_i__ = context__.vals_i("ind_des");
            pos__ = 0;
            size_t ind_des_k_0_max__ = sum(n_des);
            for (size_t k_0__ = 0; k_0__ < ind_des_k_0_max__; ++k_0__) {
                ind_des[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 159;
            validate_non_negative_index("pos_des", "E", E);
            context__.validate_dims("data initialization", "pos_des", "int", context__.to_vec(E));
            pos_des = std::vector<int>(E, int(0));
            vals_i__ = context__.vals_i("pos_des");
            pos__ = 0;
            size_t pos_des_k_0_max__ = E;
            for (size_t k_0__ = 0; k_0__ < pos_des_k_0_max__; ++k_0__) {
                pos_des[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 160;
            validate_non_negative_index("ind_tip", "T", T);
            validate_non_negative_index("ind_tip", "N", N);
            context__.validate_dims("data initialization", "ind_tip", "int", context__.to_vec(T,N));
            ind_tip = std::vector<std::vector<int> >(T, std::vector<int>(N, int(0)));
            vals_i__ = context__.vals_i("ind_tip");
            pos__ = 0;
            size_t ind_tip_k_0_max__ = T;
            size_t ind_tip_k_1_max__ = N;
            for (size_t k_1__ = 0; k_1__ < ind_tip_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < ind_tip_k_0_max__; ++k_0__) {
                    ind_tip[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 161;
            validate_non_negative_index("ind_root", "T", T);
            context__.validate_dims("data initialization", "ind_root", "int", context__.to_vec(T));
            ind_root = std::vector<int>(T, int(0));
            vals_i__ = context__.vals_i("ind_root");
            pos__ = 0;
            size_t ind_root_k_0_max__ = T;
            for (size_t k_0__ = 0; k_0__ < ind_root_k_0_max__; ++k_0__) {
                ind_root[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 162;
            validate_non_negative_index("ind_prune", "(E - (N * T))", (E - (N * T)));
            context__.validate_dims("data initialization", "ind_prune", "int", context__.to_vec((E - (N * T))));
            ind_prune = std::vector<int>((E - (N * T)), int(0));
            vals_i__ = context__.vals_i("ind_prune");
            pos__ = 0;
            size_t ind_prune_k_0_max__ = (E - (N * T));
            for (size_t k_0__ = 0; k_0__ < ind_prune_k_0_max__; ++k_0__) {
                ind_prune[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 165;
            validate_non_negative_index("n_dim", "C", C);
            context__.validate_dims("data initialization", "n_dim", "int", context__.to_vec(C));
            n_dim = std::vector<int>(C, int(0));
            vals_i__ = context__.vals_i("n_dim");
            pos__ = 0;
            size_t n_dim_k_0_max__ = C;
            for (size_t k_0__ = 0; k_0__ < n_dim_k_0_max__; ++k_0__) {
                n_dim[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 166;
            validate_non_negative_index("ind_dim", "sum(n_dim)", sum(n_dim));
            context__.validate_dims("data initialization", "ind_dim", "int", context__.to_vec(sum(n_dim)));
            ind_dim = std::vector<int>(sum(n_dim), int(0));
            vals_i__ = context__.vals_i("ind_dim");
            pos__ = 0;
            size_t ind_dim_k_0_max__ = sum(n_dim);
            for (size_t k_0__ = 0; k_0__ < ind_dim_k_0_max__; ++k_0__) {
                ind_dim[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 167;
            validate_non_negative_index("pos_dim", "C", C);
            context__.validate_dims("data initialization", "pos_dim", "int", context__.to_vec(C));
            pos_dim = std::vector<int>(C, int(0));
            vals_i__ = context__.vals_i("pos_dim");
            pos__ = 0;
            size_t pos_dim_k_0_max__ = C;
            for (size_t k_0__ = 0; k_0__ < pos_dim_k_0_max__; ++k_0__) {
                pos_dim[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 168;
            validate_non_negative_index("code_obs", "sum(n_obs)", sum(n_obs));
            context__.validate_dims("data initialization", "code_obs", "int", context__.to_vec(sum(n_obs)));
            code_obs = std::vector<int>(sum(n_obs), int(0));
            vals_i__ = context__.vals_i("code_obs");
            pos__ = 0;
            size_t code_obs_k_0_max__ = sum(n_obs);
            for (size_t k_0__ = 0; k_0__ < code_obs_k_0_max__; ++k_0__) {
                code_obs[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 169;
            validate_non_negative_index("code_tip", "N", N);
            context__.validate_dims("data initialization", "code_tip", "int", context__.to_vec(N));
            code_tip = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("code_tip");
            pos__ = 0;
            size_t code_tip_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < code_tip_k_0_max__; ++k_0__) {
                code_tip[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 170;
            validate_non_negative_index("code_nod", "E", E);
            context__.validate_dims("data initialization", "code_nod", "int", context__.to_vec(E));
            code_nod = std::vector<int>(E, int(0));
            vals_i__ = context__.vals_i("code_nod");
            pos__ = 0;
            size_t code_nod_k_0_max__ = E;
            for (size_t k_0__ = 0; k_0__ < code_nod_k_0_max__; ++k_0__) {
                code_nod[k_0__] = vals_i__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 177;
            validate_non_negative_index("beta", "B", B);
            num_params_r__ += B;
            current_statement_begin__ = 178;
            validate_non_negative_index("gamma", "G", G);
            num_params_r__ += G;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_multirate_BM_loglink_univar_nointravar_naive() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 177;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "B", B);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(B));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(B);
        size_t beta_j_1_max__ = B;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 178;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "G", G);
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec(G));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma(G);
        size_t gamma_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 177;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(B, lp__);
            else
                beta = in__.vector_constrain(B);
            current_statement_begin__ = 178;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_constrain(G, lp__);
            else
                gamma = in__.vector_constrain(G);
            // model body
            current_statement_begin__ = 185;
            lp_accum__.add(prune(beta, gamma, N, K, T, E, C, n_obs, ind_obs, Y, n_inc, pos_inc, t, W, Z, n_des, ind_des, pos_des, ind_tip, ind_root, ind_prune, n_dim, ind_dim, pos_dim, code_obs, code_tip, code_nod, pstream__));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("gamma");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(B);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(G);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_multirate_BM_loglink_univar_nointravar_naive_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(B);
        size_t beta_j_1_max__ = B;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.vector_constrain(G);
        size_t gamma_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_multirate_BM_loglink_univar_nointravar_naive";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = B;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = B;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t gamma_j_1_max__ = G;
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_multirate_BM_loglink_univar_nointravar_naive_namespace::model_multirate_BM_loglink_univar_nointravar_naive stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
